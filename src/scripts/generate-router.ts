import fs from 'node:fs';
import path from 'node:path';
import { glob } from 'glob';
import chokidar from 'chokidar';

const CWD = process.cwd();
const PAGES_DIR = path.resolve(CWD, 'src/pages');
const OUTPUT_FILE = path.resolve(CWD, 'src/router.tsx');

function formatRoutePath(filePath: string): string {
  const relativePath = path.relative(PAGES_DIR, filePath);
  const routePath = relativePath
    .replace(/\.(tsx|jsx)$/, '')
    .replace(/\/index$/, '/')
    .replace(/\[\.\.\.([^\]]+)\]/g, '*')
    .replace(/\[([^\]]+)\]/g, ':$1');

  return routePath === '' ? '/' : `/${routePath.replace(/\/$/, '')}`;
}

const lazyImport = (componentName: string, filePath: string) => {
  const relativePath = path.relative(path.dirname(OUTPUT_FILE), filePath);
  return `const ${componentName} = lazy(() => import('./${relativePath}'));`;
};

async function generateRoutes() {
  console.log('ðŸ”„ Gerando rotas...');
  const pageFiles = await glob(`${PAGES_DIR}/**/*.{tsx,jsx}`);

  const imports: string[] = [];
  const routeElements: string[] = [];

  pageFiles.forEach((file, index) => {
    const componentName = `Page${index}`;
    imports.push(lazyImport(componentName, file));
    routeElements.push(
      `<Route path="${formatRoutePath(file)}" element={<${componentName} />} />`
    );
  });
  
  routeElements.sort((a, b) => b.length - a.length);

  const outputContent = `
// ATTENTION: This file is automatically generated. Do not edit manually.
import React, { lazy, Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';

${imports.join('\n')}

const LoadingComponent = () => <div>Carregando pÃ¡gina...</div>;

export const AppRoutes = () => (
  <Suspense fallback={<LoadingComponent />}>
    <Routes>
      ${routeElements.join('\n      ')}
    </Routes>
  </Suspense>
);
  `;

  fs.writeFileSync(OUTPUT_FILE, outputContent.trim());
  console.log(`âœ… Rotas geradas com sucesso em ${OUTPUT_FILE}`);
}

const watch = process.argv.includes('--watch');
if (watch) {
  const watcher = chokidar.watch(`${PAGES_DIR}/**/*.{tsx,jsx}`, {
    persistent: true,
    ignoreInitial: true,
  });
  watcher.on('add', generateRoutes).on('unlink', generateRoutes);
  console.log(`ðŸ‘€ Observando o diretÃ³rio ${PAGES_DIR} por mudanÃ§as...`);
}

generateRoutes();